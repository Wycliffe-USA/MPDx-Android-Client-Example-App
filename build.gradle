import org.jlleitschuh.gradle.ktlint.reporter.ReporterType

buildscript {
    ext {
        deps = [
                advrecyclerview    : '1.0.0',
                gtoSupport         : libs.versions.gtoSupport.get(),
                hamcrest           : '2.2',
                junit              : '4.13.2',
                mpChart            : '3.1.0',
                picasso            : '2.8',
                picassoTransforms  : '2.4.0',
                realmAdapters      : '4.0.0',
                realmFieldNames    : '2.0.0',
                retrofit           : '2.9.0',
                splitties          : '3.0.0',
                timber             : '5.0.1',
        ]
        deps.androidX = [
                biometric         : '1.1.0',
                cardView          : '1.0.0',
                multidex          : '2.0.1',
                swipeRefreshLayout: '1.1.0',
                testJUnit         : '1.1.4',
        ]
        deps.firebase = [
                id             : '21.1.0',
        ]
    }

    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath libs.android.gradlePlugin
        classpath libs.firebase.appdistribution.gradlePlugin
        classpath libs.firebase.perf.gradlePlugin
        classpath libs.firebase.crashlytics.gradlePlugin
        classpath libs.google.services.gradlePlugin
        classpath libs.realm.gradlePlugin
    }
}

plugins {
    alias libs.plugins.grgit apply false
    alias libs.plugins.hilt apply false
    alias libs.plugins.ktlint
}

allprojects {
    repositories {
        maven {
            url 'https://jitpack.io'
            content { includeGroupByRegex 'com\\.github\\..*' }
        }
        maven {
            url 'https://cruglobal.jfrog.io/cruglobal/list/maven-locals/'
            content {
                includeGroup 'org.ccci.gto.android'
                includeGroup 'org.ccci.gto.android.testing'
                includeGroup 'org.cru.mpdx.android'
            }
        }
        google()
        mavenCentral()
        jcenter {
            content {
                includeModule("com.ochim", "recyclertablayout-androidx")
                includeModule("dk.ilios", "realmfieldnameshelper")
                includeModule("io.realm", "android-adapters")
            }
        }
    }

    version '3.0.4' + (project.hasProperty('snapshotBuild') ? '-SNAPSHOT' : '')

    // increase number of javac logged errors so that dagger errors are always logged
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "9999"
        }
    }

    configurations.all {
        resolutionStrategy {
            force libs.okhttp3

            // HACK: force an older version of Realm than what is referenced in gto-support
            force libs.realm
        }
    }
}


// common config
subprojects {
    afterEvaluate { project ->
        if (project.hasProperty('android')) {
            dependencies {
                implementation libs.kotlin.stdlib
                implementation libs.timber
            }
        }
    }
}

// configure ktlint
subprojects {
    apply plugin: "org.jlleitschuh.gradle.ktlint"

    ktlint {
        android = true
        version = libs.versions.ktlint.get()
        reporters {
            reporter(ReporterType.PLAIN_GROUP_BY_FILE)
            reporter(ReporterType.CHECKSTYLE)
        }
    }

    // HACK: workaround https://github.com/JLLeitschuh/ktlint-gradle/issues/524
    afterEvaluate {
        if (project.hasProperty('android')) {
            android.sourceSets.configureEach {
                java.srcDirs("src/$name/kotlin")
            }
        }
    }
}


// configure checkstyle
subprojects {
    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion '8.0'
    }

    task checkstyle(type: Checkstyle) {
        source 'src'
        include '**/*.java', '**/*.xml'
        exclude '**/gen/**'
        classpath = files()
    }
    afterEvaluate {
        project.tasks.findByName("check")?.dependsOn('checkstyle')
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// Accept the buildScan TOS if we indicate we want to publish a build scan
if (extensions.findByName("buildScan") != null) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

// Enforce that there are no snapshot dependencies in the project
// logic copied and modified from: researchgate gradle-release plugin (id: net.researchgate.release)
// see: https://github.com/researchgate/gradle-release/blob/master/src/main/groovy/net/researchgate/release/ReleasePlugin.groovy#L197-L214
task enforceNoSnapshotDependencies {
    def matcher = { Dependency d -> d.version?.contains('SNAPSHOT') }
    def collector = { Dependency d -> "${d.group ?: ''}:${d.name}:${d.version ?: ''}" }

    doLast {
        def message = ""
        allprojects.each { project ->
            def snapshotDependencies = [] as Set
            project.configurations.each { cfg ->
                snapshotDependencies += cfg.dependencies?.matching(matcher)?.collect(collector)
            }
            project.buildscript.configurations.each { cfg ->
                snapshotDependencies += cfg.dependencies?.matching(matcher)?.collect(collector)
            }
            if (snapshotDependencies.size() > 0) {
                message += "\n\t${project.name}: ${snapshotDependencies}"
            }
        }

        if (message) throw new GradleException("Snapshot dependencies detected: ${message}")
    }
}
